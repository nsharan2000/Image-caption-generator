# -*- coding: utf-8 -*-
"""cococaptionsfinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IAI2AYvmVYh1igeQVEA0LUHxzen-99oJ

Exerimentation with MS COCO dataset

Team: savvy captioners

-->Sharan Nagarajan

-->RKP Ghanashyam

-->Bala Murugan

Note: this is not the main code

## Initializing the model

# Importing the necessary libraries and datasets
"""

import tensorflow as tf

import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
#import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.utils import shuffle

import string
import re
import os
import time
import json
from PIL import Image
import random

"""## image and dataset path is loaded"""

image_dir ='D:/Dataset/MSCOCO/train2014/'
annotation_file='D:/Dataset/MSCOCO/annotations/captions_train2014.json'

# Read the json file
with open(annotation_file, 'r') as f:
    files = json.load(f)

# Store captions and image names in vectors
total_captions = []
image_list = []

for file in files['annotations']:
    caption = '<start> '+ file['caption'] + ' <end>'
    image_id = file['image_id']
    full_coco_image_path = image_dir + 'COCO_train2014_' + '%012d.jpg' % (image_id)
    image_list.append(full_coco_image_path)
    total_captions.append(caption)

print(total_captions[:5])

print(image_list[:5])

print("Total Images : ",(len(image_list)))
print("Total Captions :",(len(total_captions)))
print("unique images :",len(np.unique(image_list)))

num=32000
train_captions, image_list_final = shuffle(total_captions,image_list,random_state=1)
train_captions = train_captions[:num]
image_list_final = image_list_final[:num]

"""## text data processing pipeline"""

print("Total Images :" ,(len(train_captions)))
print("Total Captions :",(len(image_list_final)))
print("unique image list final :",len(np.unique(image_list_final)))

print(image_list[:10])
print(total_captions[:10])

df=pd.DataFrame({'image':image_list,'captions':total_captions})

df.head()

print('images and captions for a few examples:')
i=random.randint(0,100)
image=df['image'][i]
caption=df['captions'][i]
img= plt.imread(image) 
plt.imshow(img)
print(f"original caption:{caption}")

print('images and captions for a few examples:')
i=random.randint(0,100)
image=df['image'][i]
caption=df['captions'][i]
img= plt.imread(image) 
plt.imshow(img)
print(f"original caption:{caption}")

print('images and captions for a few examples:')
i=random.randint(0,100)
image=df['image'][i]
caption=df['captions'][i]
img= plt.imread(image) 
plt.imshow(img)
print(f"original caption:{caption}")

#inorder to process the image within the inception we need to resize it into the correct shape
def image_and_shapes(image):
  img= plt.imread(image)
  plt.imshow(img)
  print(f"Shape of the image:{img.shape}")

image_and_shapes(image_dir+ 'COCO_train2014_000000339535.jpg')

"""## loading image as encoded"""

image_model = tf.keras.applications.InceptionV3(include_top=False, weights='imagenet')
new_input = image_model.input
hidden_layer = image_model.layers[-1].output

encode_image = tf.keras.Model(new_input, hidden_layer)

def load_image(image_path):
    img = tf.io.read_file(image_path)
    img = tf.image.decode_jpeg(img, channels=3)
    img = tf.image.resize(img, (299, 299))
    img = tf.keras.applications.inception_v3.preprocess_input(img)
    return img, image_path

img1,img1_path = load_image(image_dir+ "COCO_train2014_000000339535.jpg")
print("Shape after resize :", img1.shape)
plt.imshow(img1)
#the image color is also changed because it is preprocessed as inception v3 model would take it

# Get unique images
uniquelist = sorted(set(image_list_final))
batch_size=16

#image_dataset is loaded
image_dataset = tf.data.Dataset.from_tensor_slices(uniquelist)
image_dataset = image_dataset.map(
  load_image, num_parallel_calls=tf.data.experimental.AUTOTUNE).batch(batch_size)

i=0
for img, path in image_dataset:
  i+=1
  batch_features = encode_image(img)
  batch_features = tf.reshape(batch_features,
                              (batch_features.shape[0], -1, batch_features.shape[3]))
  if(i%50==1): print('completed: ',i)
  for bf, p in zip(batch_features, path):
    path_of_feature = p.numpy().decode("utf-8")
    np.save(path_of_feature, bf.numpy())

"""## Preprocess and tokenize the captions"""

# Find the maximum length of any caption in our dataset
def calc_max_length(tensor):
    return max(len(t) for t in tensor)

# Choose the top 6000 words from the vocabulary
top_k = 6000
tokenizer = tf.keras.preprocessing.text.Tokenizer(num_words=top_k,oov_token="<unk>",
                                                  filters='!"#$%&()*+.,-/:;=?@[\]^_`{|}~ ')
tokenizer.fit_on_texts(train_captions)
train_seqs = tokenizer.texts_to_sequences(train_captions)

tokenizer.word_index['<pad>'] = 0
tokenizer.index_word[0] = '<pad>'

# Creating the tokenized vectors
train_seqs = tokenizer.texts_to_sequences(train_captions)
# Pad each vector to the max_length of the captions
# If you do not provide a max_length value, pad_sequences calculates it automatically
cap_vector = tf.keras.preprocessing.sequence.pad_sequences(train_seqs, padding='post')
# Calculates the max_length, which is used to store the attention weights
max_length = calc_max_length(train_seqs)

"""## Split the data into training and testing"""

# 80-20 split of training and validation
img_name_train, img_name_val, cap_train, cap_val = train_test_split(image_list_final,
                                                                    cap_vector,
                                                                    test_size=0.2,
                                                                    random_state=0)

print('train images : ', len(img_name_train))
print('train captions : ', len(cap_train))
print('val images : ', len(img_name_val))
print('val captions :', len(cap_val))

"""## Create a tf.data dataset for training

Our images and captions are ready! Next, let's create a tf.data dataset to use for training our model.
"""

BATCH_SIZE = 256
BUFFER_SIZE = 1000
embedding_dim = 256
units = 512
vocab_size = top_k + 1
num_steps = len(img_name_train) // BATCH_SIZE
#the final vector from inception v3 is off the shape (64,2048)
#these weights are represented ads feature shape and attention shape
features_shape = 2048
attention_features_shape = 64

#loading the saved numpy files
def map_func(img_name, cap):
  img_tensor = np.load(img_name.decode('utf-8')+'.npy')
  return img_tensor, cap

#dataset in sthe training dataset tensor
#validationset is the validation dataset tensor
dataset = tf.data.Dataset.from_tensor_slices((img_name_train, cap_train))
validationset=tf.data.Dataset.from_tensor_slices((img_name_val, cap_val))
 
# Use map to load the numpy files in parallel
dataset = dataset.map(lambda i1, i2: tf.numpy_function(
          map_func, [i1, i2], [tf.float32, tf.int32]),
          num_parallel_calls=tf.data.experimental.AUTOTUNE)
validationset = validationset.map(lambda i1, i2: tf.numpy_function(
          map_func, [i1, i2], [tf.float32, tf.int32]),
          num_parallel_calls=tf.data.experimental.AUTOTUNE)
 
# Shuffle and batch
validationset = dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE)
dataset = dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE)
 
dataset = dataset.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)
validationset = dataset.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)

"""## Model

"""

#the pretrained encoder gives the encoded image, this model is used to pass the encoded image through a single dense layer before passing onto the encoder
class EncoderInterface(tf.keras.Model):
    # Since you have already extracted the features and dumped it using pickle
    # This encoder passes those features through a Fully connected layer
    def __init__(self, embedding_dim):
        super(EncoderInterface, self).__init__()
        # shape after fc == (batch_size, 64, embedding_dim)
        self.fc = tf.keras.layers.Dense(embedding_dim)

    def call(self, x):
        x = self.fc(x)
        x = tf.nn.relu(x)
        return x

class SimpleAttention(tf.keras.Model):
  def __init__(self, units):
    super(SimpleAttention, self).__init__()
    self.W1 = tf.keras.layers.Dense(units)
    self.W2 = tf.keras.layers.Dense(units)
    self.V = tf.keras.layers.Dense(1)

  def call(self, features, hidden):
    # features (shape) (EncoderInterface output)= (batch_size, 64, embedding_dim)

    # hidden (shape)=(batch_size, hidden_size)
    
    hidden_with_time_axis = tf.expand_dims(hidden, 1)
    # hidden_with_time_axis (shape)= (batch_size, 1, hidden_size)

    score = tf.nn.tanh(self.W1(features) + self.W2(hidden_with_time_axis))
    # score shape= (batch_size, 64, hidden_size)

    # attention_weights shape= (batch_size, 64, 1)
    # you get 1 at the last axis because you are applying score to self.V
    attention_weights = tf.nn.softmax(self.V(score), axis=1)

    #attention weights is multiplied elementwise over all the features
    context_vector = attention_weights * features
    context_vector = tf.reduce_sum(context_vector, axis=1)
    # context_vector shape after sum= (batch_size, hidden_size)

    return context_vector, attention_weights

class RNN_Decoder(tf.keras.Model):
  def __init__(self, embedding_dim, units, vocab_size):
    super(RNN_Decoder, self).__init__()
    self.units = units
    #GRU units are used as recurrent neural networks

    self.embedding = tf.keras.layers.Embedding(vocab_size, embedding_dim)
    self.gru = tf.keras.layers.GRU(self.units,
                                   return_sequences=True,
                                   return_state=True,
                                   recurrent_initializer='glorot_uniform')
    self.fc1 = tf.keras.layers.Dense(self.units)
    self.fc2 = tf.keras.layers.Dense(vocab_size)

    self.attention = SimpleAttention(self.units)
  
  #the RNN model is implemented as an custom tensorflow function
  def call(self, x, features, hidden):
    # defining attention as a separate model
    context_vector, attention_weights = self.attention(features, hidden)

    #x is passed through embeddings
    x = self.embedding(x)
    #x shape (batch_size, 1, embedding_dim)

    # x is concatenated with context vector and a new dimension
    x = tf.concat([tf.expand_dims(context_vector, 1), x], axis=-1)
    #x shape (batch_size, 1, embedding_dim + hidden_size)

    # concatenated vector is passed through GRU which producese output and state
    output, state = self.gru(x)

    # shape == (batch_size, max_length, hidden_size)
    x = self.fc1(output)

    # x shape == (batch_size * max_length, hidden_size)
    x = tf.reshape(x, (-1, x.shape[2]))

    # output shape == (batch_size * max_length, vocab)
    x = self.fc2(x)

    return x, state, attention_weights

  def reset_state(self, batch_size):
    return tf.zeros((batch_size, self.units))

encoder = EncoderInterface(embedding_dim)
decoder = RNN_Decoder(embedding_dim, units, vocab_size)

#we use adam optimizer for best results
optimizer = tf.keras.optimizers.Adam()
#sparse categorical crossentroppy loss function is uses
loss_object = tf.keras.losses.SparseCategoricalCrossentropy(
    from_logits=True, reduction='none')

def loss_function(real, pred):
  mask = tf.math.logical_not(tf.math.equal(real, 0))
  loss = loss_object(real, pred)
  mask = tf.cast(mask, dtype=loss.dtype)
  loss*= mask

  return tf.reduce_mean(loss)

"""## Checkpoint"""

checkpoint_path = "./checkpoints_coco3/train"
ckpt = tf.train.Checkpoint(encoder=encoder,decoder=decoder,optimizer = optimizer)
ckpt_manager = tf.train.CheckpointManager(ckpt, checkpoint_path, max_to_keep=5)

start_epoch = 0
if ckpt_manager.latest_checkpoint:
  #as checkpoint is saved once every 5 epochs we multiply the latest checkpoint number by 5
  start_epoch = int(ckpt_manager.latest_checkpoint.split('-')[-1])
  # restoring the latest checkpoint in checkpoint_path
  ckpt.restore(ckpt_manager.latest_checkpoint)

"""## Training

"""

# adding this in a separate cell because if you run the training cell
# many times, the loss_plot array will be reset
loss_plot = []
val_loss_plot=[]

@tf.function
def train_step(img_tensor, target):
  loss = 0

  # initializing the hidden state for each batch
  # because the captions are not related from image to image, we reset the decoder states
  hidden = decoder.reset_state(batch_size=target.shape[0])

  dec_input = tf.expand_dims([tokenizer.word_index['<start>']] * target.shape[0], 1)

  with tf.GradientTape() as tape:
      features = encoder(img_tensor)

      for i in range(1, target.shape[1]):
          # passing the features through the decoder
          predictions, hidden, _ = decoder(dec_input, features, hidden)

          loss += loss_function(target[:, i], predictions)

          # using teacher forcing
          dec_input = tf.expand_dims(target[:, i], 1)

  total_loss = (loss / int(target.shape[1]))

  trainable_variables = encoder.trainable_variables + decoder.trainable_variables

  #gradient descent is applied to the trainable variables
  gradients = tape.gradient(loss, trainable_variables)
  optimizer.apply_gradients(zip(gradients, trainable_variables))

  return loss, total_loss

@tf.function
def val_step(img_tensor, target):
  loss = 0

  # initializing the hidden state for each batch
  # because the captions are not related from image to image, we reset the decoder states
  hidden = decoder.reset_state(batch_size=target.shape[0])

  dec_input = tf.expand_dims([tokenizer.word_index['<start>']] * target.shape[0], 1)

  with tf.GradientTape() as tape:
      features = encoder(img_tensor)

      for i in range(1, target.shape[1]):
          # passing the features through the decoder
          predictions, hidden, _ = decoder(dec_input, features, hidden)

          loss += loss_function(target[:, i], predictions)

          # using teacher forcing
          dec_input = tf.expand_dims(target[:, i], 1)

  total_loss = (loss / int(target.shape[1]))
  return loss, total_loss

EPOCHS = 20
 
for epoch in range(start_epoch, EPOCHS):
    start = time.time()
    total_loss = 0
    totalval_loss=0
 
    for (batch, (img_tensor, target)) in enumerate(dataset):
        batch_loss, t_loss = train_step(img_tensor, target)
        total_loss += t_loss
 
        if batch % 100 == 0:
            print ('Epoch {} Batch {} Loss {:.4f}'.format(
              epoch + 1, batch, batch_loss.numpy() / int(target.shape[1])))
    # storing the epoch end loss value to plot later
    loss_plot.append(total_loss / num_steps)
 
    for (batch, (img_tensor, target)) in enumerate(validationset):
        batchval_loss, t_loss = val_step(img_tensor, target)
        totalval_loss += t_loss
        if batch % 100 == 0:
            print ('Epoch {} Batch {} val Loss {:.4f}'.format(
                  epoch + 1, batch, batchval_loss.numpy() / int(target.shape[1])))

    # storing the validation epoch end loss value to plot later
    val_loss_plot.append(totalval_loss / num_steps)
 
    if epoch % 5 == 0:
      ckpt_manager.save()
 
    print ('Epoch {} Loss {:.6f}'.format(epoch + 1,
                                         total_loss/num_steps))
    print('validation loss : ',totalval_loss/num_steps)
    print ('Time taken for 1 epoch {} sec\n'.format(time.time() - start))



plt.plot(loss_plot,label='train loss')
plt.plot(val_loss_plot, label='validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Loss Plot')
plt.legend()

plt.show()

"""## Caption!

"""

def getcaption(image):
    plot_attention = np.zeros((max_length, attention_features_shape))

    hidden = decoder.reset_state(batch_size=1)

    temp_input = tf.expand_dims(load_image(image)[0], 0)
    img_tensor_val = encode_image(temp_input)
    img_tensor_val = tf.reshape(img_tensor_val, (img_tensor_val.shape[0], -1, img_tensor_val.shape[3]))

    features = encoder(img_tensor_val)

    dec_input = tf.expand_dims([tokenizer.word_index['<start>']], 0)
    caption_generated = []

    for i in range(max_length):
        predictions, hidden, attention_weights = decoder(dec_input, features, hidden)

        plot_attention[i] = tf.reshape(attention_weights, (-1, )).numpy()

        predicted_id = tf.random.categorical(predictions, 1)[0][0].numpy()
        caption_generated.append(tokenizer.index_word[predicted_id])

        if tokenizer.index_word[predicted_id] == '<end>':
            return caption_generated, plot_attention

        dec_input = tf.expand_dims([predicted_id], 0)

    plot_attention = plot_attention[:len(caption_generated), :]
    return caption_generated, plot_attention

# #beam search
# def getcaption(image, beam_index = 3):

#     start = [tokenizer.word_index['<start>']]
    
#     # caption_generated[0][0] = index of the starting word
#     # caption_generated[0][1] = probability of the word predicted
#     caption_generated = [[start, 0.0]]

#     plot_attention = np.zeros((max_length, attention_features_shape))

#     hidden = decoder.reset_state(batch_size=1)

#     temp_input = tf.expand_dims(load_image(image)[0], 0)
#     img_tensor_val = encode_image(temp_input)
#     img_tensor_val = tf.reshape(img_tensor_val, (img_tensor_val.shape[0], -1, img_tensor_val.shape[3]))

#     features = encoder(img_tensor_val)

#     dec_input = tf.expand_dims([tokenizer.word_index['<start>']], 0)

#     while len(caption_generated[0][0]) < max_length:
#         i=0
#         temp = []
#         for s in caption_generated:

#           predictions, hidden, attention_weights = decoder(dec_input, features, hidden)

#           plot[i] = tf.reshape(attention_weights, (-1, )).numpy()
#           i=i+1
#           # Getting the top <beam_index>(n) predictions
#           word_preds = np.argsort(predictions[0])[-beam_index:]
          
#           # creating a new list so as to put them via the model again
#           for w in word_preds:       
#             next_cap, prob = s[0][:], s[1]
#             next_cap.append(w)
#             prob += predictions[0][w]
#             temp.append([next_cap, prob])
#         caption_generated = temp
#         # Sorting according to the probabilities
#         caption_generated = sorted(caption_generated, reverse=False, key=lambda l: l[1])
#         # Getting the top words
#         caption_generated = caption_generated[-beam_index:]
        
#         predicted_id = caption_generated[-1] # with Max Probability
#         pred_list = predicted_id[0]
        
#         prd_id = pred_list[-1] 
#         if(prd_id!=3):
#           dec_input = tf.expand_dims([prd_id], 0)  # Decoder input is the word predicted with highest probability among the top_k words predicted
#         else:
#           break

#     caption_generated = caption_generated[-1][0]
    
#     intermediate_caption = [tokenizer.index_word[i] for i in caption_generated]
#     final_caption = []
#     for i in intermediate_caption:
#         if i != '<end>':
#             final_caption.append(i)
            
#         else:
#             break

#     plot = plot[:len(caption_generated), :]
#     final_caption = ' '.join(final_caption[1:])
#     return final_caption,plot

def plot(image, caption_generated, plot_attention):
    temp_image = np.array(Image.open(image))

    fig = plt.figure(figsize=(10, 10))

    len_caption_generated = len(caption_generated)
    for l in range(len_caption_generated):
        temp_att = np.resize(plot_attention[l], (8, 8))
        ax = fig.add_subplot(len_caption_generated//2, len_caption_generated//2, l+1)
        ax.set_title(caption_generated[l])
        img = ax.imshow(temp_image)
        ax.imshow(temp_att, cmap='gray', alpha=0.6, extent=img.get_extent())

    plt.tight_layout()
    plt.show()

# captions on the validation set
rid = np.random.randint(0, len(img_name_val))
image = img_name_val[rid]
real_caption = ' '.join([tokenizer.index_word[i] for i in cap_val[rid] if i not in [0]])
caption_generated, plot_attention = getcaption(image)

print ('Real Caption:', real_caption)
print ('Prediction Caption:', ' '.join(caption_generated))
plot(image, caption_generated, plot_attention)
Image.open(image)

"""# Testing the model with our own images"""

image_path='C:/Users/Hp/python/sharan.jpg'
caption_generated, plot_attention = getcaption(image_path)
print ('Prediction Caption:', ' '.join(caption_generated))
plot(image_path, caption_generated, plot_attention)
# opening the image
Image.open(image_path)

image_url = 'https://barmytravel.com/sites/barmytravel.com/files/styles/event-hero/public/xgettyimages-1192401900-web.jpg,qitok=RTMkPtU5.pagespeed.ic.UlkLLaSAb6.jpg'
image_extension = image_url[-4:]
image_path = tf.keras.utils.get_file('img3'+image_extension,
                                     origin=image_url)

caption_generated, plot_attention = getcaption(image_path)
print ('Prediction Caption:', ' '.join(caption_generated))
plot(image_path, caption_generated, plot_attention)
# opening the image
Image.open(image_path)

image_url = 'https://cdn.mos.cms.futurecdn.net/3DCULvvXKrsqSNMxoW39sH-320-80.jpg'
image_extension = image_url[-4:]
image_path = tf.keras.utils.get_file('image4'+image_extension,
                                     origin=image_url)

result, plot_attention = getcaption(image_path)
print ('Prediction Caption:', ' '.join(result))
plot(image_path, result, plot_attention)
# opening the image
Image.open(image_path)